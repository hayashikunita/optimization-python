pdf読み取り_last.md

2022/4/2

PDFからテキストを抽出する

はじめに

こんにちは、キノコードです。
仕事をしていると、PDFの中に書かれているテキストを、別の書類に使いたいという場⾯はないでしょう
か。
PDFファイルのごく⼀部を取り出すだけであれば、コピペでもできますが、選択範囲が多く、何ページにも
わたるようなときはかなり⾯倒な作業です。
しかも画像をPDF化したファイルですと、⽂字や表などをコピペしようとしても、うまくできないことが多
いかと思います。

そんなときに、テキストファイルに読み込むことができると、かなりの業務効率化につながるでしょう。
PDF形式でもらった⽂書の内容をテキスト化することで、携帯にメールで転送するなど、⽂書の⼀部をテキ
ストで保存・転送・管理したりすることも可能になります。
この動画では、Pythonでpdfを読み取り、テキストファイルに書き起こす⽅法について説明します。
キノコードでは、この動画の他にも仕事の⾃動化の動画、株のデータ分析の講座も配信しています。

ご興味ある⽅はぜひそちらもご覧ください。

チャンネル登録がまだの⽅は、新着通知をもいきますのでチャンネル登録をお願いします。

PDF操作のライブラリについて
Pythonには、PDFのページ操作やテキストの抽出を⾏うためのいくつかのライブラリがあります。
代表例として、PyPDF2、pdfminer.six、Apache Tikaがあります。
それぞれのライブラリの特徴を⾒ていきましょう。
最も⼿軽に使⽤できるのは、PyPDF2 です。
PyPDF2 では、PDF のページの操作や、テキストの読み取りができます。
しかし、デメリットとして、⽇本語に対応していないため、⽇本語の PDF は読み取ることができません。
英数字の PDF の読み取りに適しています。
⽇本語の PDF を読み取るためには、PDFMiner か Apache Tika を使⽤することで、⽇本語のテキストを抽出
することができます。
Apache Tika は、Java で開発されたドキュメント分析・抽出ツールです。
Tika は、エクセルや PDF など様々な形式のファイルからテキストを抽出できます。
ただし、Python で利⽤するには、 Java の実⾏環境もインストールする必要があります。
⼀⽅、PDFMiner は、ライブラリをインストールするだけで、⽇本語のテキストを抽出することができま
す。
ですので、今回は、PDFMiner ライブラリを使い、⽇本語の PDF を読み取り、テキストを抽出し、テキスト
ファイルにする、ということをやってみましょう。

PDFMinerでテキストを抽出する

# !pip install pdfminer.six

1 / 4

pdf読み取り_last.md

2022/4/2

# 必要なライブラリのインストール
from pdfminer.pdfpage import PDFPage 
from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter 
from pdfminer.converter import TextConverter 
from pdfminer.layout import LAParams 

まず、今回のプログラムで使⽤するライブラリをインストールしておきましょう。

ライブラリとは、よく使う機能や関数をまとめて簡単に使えるようにしたものです。
今回は、pdfminer というライブラリを使⽤します。
pdfminerは、PDF ファイルからテキストを抽出するためのライブラリです。
⽇本語のテキストも抽出できるのが特徴です。
このコードを実⾏すると、Jupyter lab でインストールできます。
実⾏します。

インストールできました。
次に、pdfminer ライブラリのモジュールからクラスを使⽤できるように、これらをインポートします。イン
ポートした各クラスについては、後ほど説明します。

実⾏します。

インポートが完了しました。

# 読み込みたいPDFファイル(http://it-gyousei.com/download/doc/koyoukeiyaku.pdf) 
input_file = open('sample.pdf', 'rb') 
# 書き込み⽤のテキストファイル 
output_file = open('output.txt', 'w') 

次に、プログラムで使⽤するPDFを読み込みます。
今回は、サンプルとしてこの動画の書き起こし⽤のPDFファイルを使⽤します。 サンプルのPDFについて
は、書き起こしのWebサイトからダウンロードできます。概要欄に記載しますので、ダウンロード後にこの
ipynb ファイルと同じディレクトリに保存しましょう。
open関数の第⼀引数に、⽤意したPDFファイル「sample.pdf」を渡します。
第⼆引数にバイナリファイルを読み込むためのモードである「rb」を指定します。
そして変数input_fileに代⼊します。
バイナリファイルとは、テキストデータではなく、バイナリデータを持っているファイルのことです。
バイナリデータとは、コンピュータが理解できるように数字と記号に変換したものです。 rが読み込みで、w
が書き込みです。bがバイナリファイルを意味します。

次に、書き込み⽤のテキストファイルを⽤意します。
open 関数の第⼀引数に、ファイル名を「output.txt」として指定します。
第⼆引数に、書き込みモードの「w」を指定し、変数 output_file に代⼊します。

# Layout Analysisのパラメーターを設定 
laparams = LAParams() 
laparams 

2 / 4

pdf読み取り_last.md

2022/4/2

次に、LAParamsというクラスでインスタンスを作成し、変数laparamsに代⼊します。
LAParams クラスを設定することで、例えば、テキストを１⽂字ずつではなく、1⾏や、複数⾏をひとかたま
りとして値を取得したりすることができます。

きれいにテキストを抽出するためには、必ず設定するクラスだと抑えておきましょう。
表⽰してみましょう。実⾏します。 このように、テキストを抽出するためのルールが設定されました。例え
ば、⽂字と⽂字の間隔、単語と単語の間隔、⾏間隔などです。 今回はデフォルトの値に設定しましたが、⽂
書に応じて細かく調整をすることができます。

# 共有リソースを格納するPDFリソースマネージャーオブジェクトを作成 
resource_manager = PDFResourceManager() 
resource_manager 

次に、PDFResourceManager クラスから resource_manager というインスタンスを作成します。
PDFResourceManager クラスは、フォントや画像などの共有リソースを格納するために使⽤されます。
PDFResourceManager クラスを使⽤することで、PDF ファイルのテキストのフォントや画像などの情報を、
テキストファイルと共有することができます。 このクラスも必ず設定するクラスだと、抑えておきましょ
う。

# テキストに変換 
device = TextConverter(resource_manager, output_file, laparams=laparams) 
device 

次に、TextConverter クラスを使⽤します。
TextConverter は、テキストに変換するためのクラスです。
第⼀引数には、PDFResourceManager クラスのオブジェクトのresource_managerを、第⼆引数には出⼒⽤
のファイルoutput_fileを、第三引数の laparams には、LAParams()のオブジェクトのlaparamsを指定しま
す。
これで⽣成したインスタンスを変数deviceに代⼊します。
オブジェクトが⽣成されました。

# ページの内容を処理するためのPDFインタプリタオブジェクトを作成 
interpreter = PDFPageInterpreter(resource_manager, device) 
interpreter 

次に、PDFPageInterpreter（PDFページインタープリター） クラスを使⽤します。
PDFPageInterpreter は、テキストに変換したものをコンピュータが読み取れるように変換するためのクラス
です。
第⼀引数には、PDFResourceManager クラスのオブジェクトのresource_managerを、第⼆引数には
TextConverter のオブジェクトのdeviceを指定します。
ここで⽣成したインスタンスを変数interpreterに代⼊します。
これで、テキストが解析可能な状態のオブジェクトになりました。

3 / 4

pdf読み取り_last.md

2022/4/2

# ドキュメントに含まれる各ページを処理
for page in PDFPage.get_pages(input_file): 
    interpreter.process_page(page) 

では最後に、1ページずつテキストを抽出して出⼒をしましょう。 forで、1ページごとに順に処理をします。
次に、PDFPage クラスと、get_pages メソッドを使⽤します。
PDFPage.get_pages()にファイルオブジェクトを指定して、PDFPage オブジェクトを順に取得することがで
きます。
成功していると、同じディレクトリに「output.txt」というテキストファイルが作成されているはずです。
実⾏します。

テキストファイルを開いて確認してみましょう。
PDFファイルのテキストが抽出され、テキストファイルに書き出すことができました。 ⽂字化けなどもなさ
そうです。これで完了です。

おわりに

レッスンは以上です。

いかがでしたでしょうか︖⼿動でやると⼤変なことも、このようにプログラムで解決できることはたくさん

あります。

まずは⾝近な⽂書から試してみて、どんどんプログラムを改善していくと、どんなファイルにも対応ができ

るようになります。

ぜひ業務を効率化して、ご⾃⾝にしかできないことをやるということにつなげてみてください。

キノコードでは、今後このような動画を配信予定です。
チャンネル登録がまだの⽅は、ぜひチャンネル登録をお願いいたします。 それではまた次のレッスンでお会
いしましょう。

4 / 4

